name: Comprehensive OpenAPI Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis to perform'
        required: true
        default: 'repository'
        type: choice
        options:
        - repository
        - single-file
      spec_url:
        description: 'OpenAPI specification URL (for single-file analysis)'
        required: false
        default: 'https://petstore.swagger.io/v2/swagger.json'
      repository:
        description: 'Repository to analyze (for repository analysis)'
        required: false
        default: 'github/rest-api-description'

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Analyze OpenAPI (Single File)
      if: github.event.inputs.analysis_type == 'single-file' || (github.event.inputs.analysis_type == null && github.event.inputs.spec_url != null)
      id: analyze-single
      uses: ApyGuard/apyguard_openapi_analysis@main
      with:
        spec_url: ${{ github.event.inputs.spec_url || 'https://petstore.swagger.io/v2/swagger.json' }}
        
    - name: Analyze OpenAPI (Repository)
      if: github.event.inputs.analysis_type == 'repository' || (github.event.inputs.analysis_type == null && github.event.inputs.repository != null)
      id: analyze-repo
      uses: ApyGuard/apyguard_openapi_analysis@main
      with:
        repository: ${{ github.event.inputs.repository || github.repository }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        output_format: 'summary'
        
    - name: Set Analysis Results
      id: results
      run: |
        if [ "${{ github.event.inputs.analysis_type }}" == "single-file" ] || [ "${{ github.event.inputs.analysis_type }}" == null -a "${{ github.event.inputs.spec_url }}" != null ]; then
          echo "analysis_type=single" >> $GITHUB_OUTPUT
          echo "is_valid=${{ steps.analyze-single.outputs.is_valid }}" >> $GITHUB_OUTPUT
          echo "suggestions_count=${{ steps.analyze-single.outputs.suggestions_count }}" >> $GITHUB_OUTPUT
          echo "operations_count=${{ steps.analyze-single.outputs.operations_count }}" >> $GITHUB_OUTPUT
          echo "paths_count=${{ steps.analyze-single.outputs.paths_count }}" >> $GITHUB_OUTPUT
          echo "schemas_count=${{ steps.analyze-single.outputs.schemas_count }}" >> $GITHUB_OUTPUT
          echo "analysis=${{ steps.analyze-single.outputs.analysis }}" >> $GITHUB_OUTPUT
        else
          echo "analysis_type=repository" >> $GITHUB_OUTPUT
          echo "is_valid=${{ steps.analyze-repo.outputs.is_valid }}" >> $GITHUB_OUTPUT
          echo "suggestions_count=${{ steps.analyze-repo.outputs.suggestions_count }}" >> $GITHUB_OUTPUT
          echo "operations_count=${{ steps.analyze-repo.outputs.operations_count }}" >> $GITHUB_OUTPUT
          echo "paths_count=${{ steps.analyze-repo.outputs.paths_count }}" >> $GITHUB_OUTPUT
          echo "schemas_count=${{ steps.analyze-repo.outputs.schemas_count }}" >> $GITHUB_OUTPUT
          echo "repository_name=${{ steps.analyze-repo.outputs.repository_name }}" >> $GITHUB_OUTPUT
          echo "repository_full_name=${{ steps.analyze-repo.outputs.repository_full_name }}" >> $GITHUB_OUTPUT
          echo "repository_url=${{ steps.analyze-repo.outputs.repository_url }}" >> $GITHUB_OUTPUT
          echo "repository_stars=${{ steps.analyze-repo.outputs.repository_stars }}" >> $GITHUB_OUTPUT
          echo "repository_forks=${{ steps.analyze-repo.outputs.repository_forks }}" >> $GITHUB_OUTPUT
          echo "analysis=${{ steps.analyze-repo.outputs.analysis }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Display Results
      run: |
        echo "OpenAPI Analysis Results:"
        echo "========================="
        echo "Analysis Type: ${{ steps.results.outputs.analysis_type }}"
        echo "Valid: ${{ steps.results.outputs.is_valid }}"
        echo "Suggestions: ${{ steps.results.outputs.suggestions_count }}"
        echo "Operations: ${{ steps.results.outputs.operations_count }}"
        echo "Paths: ${{ steps.results.outputs.paths_count }}"
        echo "Schemas: ${{ steps.results.outputs.schemas_count }}"
        
        if [ "${{ steps.results.outputs.analysis_type }}" == "repository" ]; then
          echo "Repository: ${{ steps.results.outputs.repository_full_name }}"
          echo "URL: ${{ steps.results.outputs.repository_url }}"
          echo "Stars: ${{ steps.results.outputs.repository_stars }}"
          echo "Forks: ${{ steps.results.outputs.repository_forks }}"
        fi
        
    - name: Create Analysis Report
      run: |
        mkdir -p reports
        echo "${{ steps.results.outputs.analysis }}" > reports/analysis.json
        
        # Create a summary report
        cat > reports/summary.md << EOF
        # OpenAPI Analysis Report
        
        **Generated**: $(date)
        **Analysis Type**: ${{ steps.results.outputs.analysis_type }}
        **Valid**: ${{ steps.results.outputs.is_valid }}
        **Suggestions**: ${{ steps.results.outputs.suggestions_count }}
        **Operations**: ${{ steps.results.outputs.operations_count }}
        **Paths**: ${{ steps.results.outputs.paths_count }}
        **Schemas**: ${{ steps.results.outputs.schemas_count }}
        
        EOF
        
        if [ "${{ steps.results.outputs.analysis_type }}" == "repository" ]; then
          cat >> reports/summary.md << EOF
        **Repository**: ${{ steps.results.outputs.repository_full_name }}
        **URL**: ${{ steps.results.outputs.repository_url }}
        **Stars**: ${{ steps.results.outputs.repository_stars }}
        **Forks**: ${{ steps.results.outputs.repository_forks }}
        
        EOF
        fi
        
    - name: Upload Analysis Reports
      uses: actions/upload-artifact@v4
      with:
        name: openapi-analysis-reports
        path: reports/
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const analysis = JSON.parse('${{ steps.results.outputs.analysis }}');
          const analysisType = '${{ steps.results.outputs.analysis_type }}';
          
          let comment = `## 🔍 OpenAPI Analysis Results\n\n`;
          comment += `**Analysis Type**: ${analysisType}\n`;
          comment += `**Valid**: ${analysis.is_valid ? '✅' : '❌'}\n`;
          comment += `**Suggestions**: ${analysis.suggestions ? analysis.suggestions.length : 0}\n`;
          comment += `**Operations**: ${analysis.summary ? analysis.summary.operations_count : 0}\n`;
          comment += `**Paths**: ${analysis.summary ? analysis.summary.paths_count : 0}\n`;
          comment += `**Schemas**: ${analysis.summary ? analysis.summary.schemas_count : 0}\n\n`;
          
          if (analysisType === 'repository' && analysis.repository) {
            comment += `**Repository**: [${analysis.repository.full_name}](${analysis.repository.url})\n`;
            comment += `**Stars**: ${analysis.repository.stars} | **Forks**: ${analysis.repository.forks}\n\n`;
            
            if (analysis.openapi_files && analysis.openapi_files.length > 0) {
              comment += `### 📄 Found ${analysis.openapi_files.length} OpenAPI file(s):\n\n`;
              analysis.openapi_files.forEach((file, index) => {
                const fileInfo = file.file_info;
                const summary = file.summary || {};
                const suggestions = file.suggestions || [];
                
                comment += `#### ${index + 1}. \`${fileInfo.path}\`\n`;
                comment += `- **Operations**: ${summary.operations_count || 0}\n`;
                comment += `- **Paths**: ${summary.paths_count || 0}\n`;
                comment += `- **Schemas**: ${summary.schemas_count || 0}\n`;
                comment += `- **Suggestions**: ${suggestions.length}\n\n`;
              });
            }
          }
          
          if (analysis.suggestions && analysis.suggestions.length > 0) {
            comment += `### 📋 Suggestions:\n\n`;
            analysis.suggestions.slice(0, 10).forEach(suggestion => {
              comment += `- ${suggestion}\n`;
            });
            if (analysis.suggestions.length > 10) {
              comment += `- ... and ${analysis.suggestions.length - 10} more suggestions\n`;
            }
          } else {
            comment += `### ✅ No suggestions found! Your OpenAPI specification looks great! 🎉\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
